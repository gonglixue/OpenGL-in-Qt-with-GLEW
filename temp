#version 330

// attributes
layout(location = 0) in vec3	i_position;	// xyz - position
layout(location = 1) in vec3	i_normal;	// xyz - normal
layout(location = 1) in vec2	i_texcoord0;	// xy - texture coords

// uniforms
uniform mat4 u_model_mat;
uniform mat4 u_view_mat;
uniform mat4 u_proj_mat;
uniform mat3 u_normal_mat;
uniform vec3 u_light_position;
uniform vec3 u_camera_position;

// output data from vertex to fragment shader
out vec3	o_normal;
out vec3 o_lightVector;
out vec3 o_viewVector;
out vec2	o_texcoords;

///////////////////////////////////////////////////////////////////

void main(void)
{
   // transform position and normal to world space
   vec4 positionWorld = u_model_mat * vec4(i_position, 1.0);
   vec3 normalWorld = u_normal_mat * i_normal;

   // calculate and pass vectors required for lighting
   o_lightVector = u_light_position - positionWorld.xyz;
   o_viewVector = u_camera_position - positionWorld.xyz;
   o_texcoords	= i_texcoord0;
   o_normal = normalWorld;

   // project world space position to the screen and output it
   gl_Position	= u_proj_mat * u_view_mat * positionWorld;
}










#version 330

// data from vertex shader
in vec3	o_normal;
in vec3	o_lightVector;
in vec3	o_viewVector;
in vec2	o_texcoords;

// diffuse color of the object
uniform vec3	u_objectColor;
// cool color of gooch shading
uniform vec3	u_coolColor;
// warm color of gooch shading
uniform vec3	u_warmColor;
// how much to take from object color in final cool color
uniform float u_alpha;
// how much to take from object color in final warm color
uniform float u_beta;

// output to framebuffer
out vec4	resultingColor;

///////////////////////////////////////////////////////////

void main(void)
{
   // normlize vectors for lighting
   vec3 normalVector = normalize(o_normal);
   vec3 lightVector = normalize(o_lightVector);
   // intensity of diffuse lighting [-1, 1]
   float diffuseLighting = dot(lightVector, normalVector);
   // map intensity of lighting from range [-1; 1] to [0, 1]
   float = (1.0 + diffuseLighting)/2;

   //////////////////////////////////////////////////////////////////

   // cool color mixed with color of the object
   vec3 coolColorMod = u_coolColor + u_objectColor * u_alpha;
   // warm color mixed with color of the object
   vec3 warmColorMod = u_warmColor + u_objectColor * u_beta;
   // interpolation of cool and warm colors according
   // to lighting intensity. The lower the light intensity,
   // the larger part of the cool color is used
   vec3 colorOut = mix(coolColorMod, warmColorMod, interpolationValue);

   //////////////////////////////////////////////////////////////////

   // save color
   resultingColor.rgb = colorOut;
   resultingColor.a = 1;
}

uniform vec3 WarmColour;
uniform vec3 CoolColour;
uniform vec3 SurfaceColour;
uniform float OutlineWidth;

varying vec3 N;
varying vec3 P;
varying vec3 V;
varying vec3 L;

void main()
{
    vec3 l = normalize(L);
    vec3 n = normalize(N);
    vec3 v = normalize(V);
    vec3 h = normalize(l+v);

    float diffuse = dot(l,n);
    float specular = pow(max(dot(n,h), 0.0),32.0);

    vec3 cool = min(CoolColour+SurfaceColour,1.0);
    vec3 warm = min(WarmColour+SurfaceColour,1.0);

    vec3 colour = min(mix(cool,warm,diffuse)+specular,1.0);

    if (dot(n,v)<OutlineWidth) colour=vec3(0,0,0);

    gl_FragColor = vec4(colour,1);
}
